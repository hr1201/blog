import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.fe0df64f.js";const m=JSON.parse('{"title":"元组类型","description":"","frontmatter":{},"headers":[],"relativePath":"articles/typescript/10-元组类型.md","filePath":"articles/typescript/10-元组类型.md","lastUpdated":1690859668000}'),l={name:"articles/typescript/10-元组类型.md"},o=p(`<h1 id="元组类型" tabindex="-1">元组类型 <a class="header-anchor" href="#元组类型" aria-label="Permalink to &quot;元组类型&quot;">​</a></h1><p>在 TypeScript 中，<code>元组（Tuple）类型</code>用于表示<strong>固定长度</strong>和<strong>类型</strong>的<strong>数组</strong>。</p><p>元组类型可以包含<strong>多个不同类型</strong>的元素，并且每个元素的类型是<strong>预定义</strong>的。元组类型的长度是固定的，即在创建元组时指定了元素的数量，并且每个元素的类型在元组类型中的对应位置是已知的。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr</span><span style="color:#F97583;">:readonly</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr2</span><span style="color:#F97583;">:readonly</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">x</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">y</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 需要type类型，直接传arr[0]会报错，所以需要使用typeof去判断其类型</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">first</span><span style="color:#F97583;">=typeof</span><span style="color:#E1E4E8;"> arr[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">second</span><span style="color:#F97583;">=typeof</span><span style="color:#E1E4E8;"> arr[</span><span style="color:#9ECBFF;">&#39;length&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr</span><span style="color:#D73A49;">:readonly</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr2</span><span style="color:#D73A49;">:readonly</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">x</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">y</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 需要type类型，直接传arr[0]会报错，所以需要使用typeof去判断其类型</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">first</span><span style="color:#D73A49;">=typeof</span><span style="color:#24292E;"> arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">second</span><span style="color:#D73A49;">=typeof</span><span style="color:#24292E;"> arr[</span><span style="color:#032F62;">&#39;length&#39;</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="https://cdn.staticaly.com/gh/hr1201/img@main/imgs/202307252114993.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/hr1201/img@main/imgs/202307252119442.png" alt=""></p>`,6),e=[o];function r(t,c,y,E,i,d){return n(),a("div",null,e)}const b=s(l,[["render",r]]);export{m as __pageData,b as default};
