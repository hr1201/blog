import{d as p,o as a,c as e,Q as y,_ as i,h as u,H as n,b as d,w as c,l as r,ac as m,F as g,S as b,U as _}from"./chunks/framework.7104966c.js";import{B as f}from"./chunks/Button.1eeb95d2.js";const v={class:"sync"},A=y('<div class="sync-content" data-v-57582136><div class="img" data-v-57582136></div><div class="name" data-v-57582136></div></div><hr style="width:100%;margin-left:0;" data-v-57582136><div class="sync-img" data-v-57582136></div><div class="sync-pop" data-v-57582136></div>',4),D=[A],h=p({__name:"skeleton",setup(o){return(l,s)=>(a(),e("div",v,D))}});const F=i(h,[["__scopeId","data-v-57582136"]]),k=p({__name:"use",setup(o){const l=b(()=>_(()=>import("./chunks/sync.ad8fd615.js"),["assets/chunks/sync.ad8fd615.js","assets/chunks/framework.7104966c.js"]));let s=u(0);const E=()=>{s.value++};return(V,t)=>(a(),e(g,null,[n(f,{onClick:t[0]||(t[0]=x=>E()),hoverF:"刷新",hoverS:"click!"}),(a(),d(m,{key:r(s)},{default:c(()=>[n(r(l))]),fallback:c(()=>[n(F)]),_:1}))],64))}}),B=y(`<h1 id="异步组件-代码分包-suspense" tabindex="-1">异步组件&amp;代码分包&amp;suspense <a class="header-anchor" href="#异步组件-代码分包-suspense" aria-label="Permalink to &quot;异步组件&amp;代码分包&amp;suspense&quot;">​</a></h1><h2 id="为什么使用异步组件" tabindex="-1">为什么使用异步组件？ <a class="header-anchor" href="#为什么使用异步组件" aria-label="Permalink to &quot;为什么使用异步组件？&quot;">​</a></h2><p>在Web开发中，我们通常希望尽可能减小应用的加载时间。一个有效的方法是<strong>代码分割（code-splitting）</strong>，即将应用划分为多个小的<strong>代码块（或称为包）</strong>，只有当需要时才加载特定的代码块。这样可以显著提高应用的<strong>首次加载速度</strong>。</p><p>当我们在Vue项目中使用import引入组件时，无论组件是否被使用，它们都会被打包到一个主包（main bundle）中。这可能导致主包体积过大，影响应用的加载性能。这种情况下，我们可以考虑使用<strong>异步组件（Async Component）</strong>。</p><h2 id="异步组件的使用" tabindex="-1">异步组件的使用 <a class="header-anchor" href="#异步组件的使用" aria-label="Permalink to &quot;异步组件的使用&quot;">​</a></h2><p>异步组件将某个组件的代码分割到一个单独的包中。当这个组件被实际需要（例如被渲染）时，Vue会自动加载这个组件的代码。这样，我们可以将不常用的组件代码从主包中分离出去，从而减小主包的体积。</p><p>Vue还提供了一个名为<code>&lt;suspense&gt;</code>的特殊组件，用于处理异步组件的加载状态。</p><ol><li>当异步组件正在加载时，<code>&lt;suspense&gt;</code>会渲染它的<code>fallback</code>插槽；</li><li>当异步组件加载完成时，<code>&lt;suspense&gt;</code>会渲染它的<code>default</code>默认插槽。</li></ol><p>这使得我们可以轻松地为异步组件添加加载指示器，例如：骨架屏等。</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- &lt;uses&gt;&lt;/uses&gt; --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 展示异步组件需要使用 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">Suspense</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">&lt;!-- 在封装的axios中，会延迟两秒再显示以下默认组件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> #</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">&lt;!-- 真实组件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#FDAEB7;font-style:italic;">syncVue</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#FDAEB7;font-style:italic;">syncVue</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">&lt;!-- 在等待期间，可以使用#fallback放置骨架屏 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> #</span><span style="color:#B392F0;">fallback</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">&lt;!-- 骨架屏组件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#FDAEB7;font-style:italic;">skeleton</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#FDAEB7;font-style:italic;">skeleton</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#FDAEB7;font-style:italic;">Suspense</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&#39;ts&#39;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, reactive, watch, defineAsyncComponent } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> skeleton </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./components/骨架屏/skeleton.vue&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 异步组件的引入需要使用defineAsyncComponent</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">syncVue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineAsyncComponent</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./components/骨架屏/sync.vue&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scoped</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- &lt;uses&gt;&lt;/uses&gt; --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 展示异步组件需要使用 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">Suspense</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!-- 在封装的axios中，会延迟两秒再显示以下默认组件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> #</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!-- 真实组件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#B31D28;font-style:italic;">syncVue</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#B31D28;font-style:italic;">syncVue</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!-- 在等待期间，可以使用#fallback放置骨架屏 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> #</span><span style="color:#6F42C1;">fallback</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!-- 骨架屏组件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#B31D28;font-style:italic;">skeleton</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#B31D28;font-style:italic;">skeleton</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#B31D28;font-style:italic;">Suspense</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;ts&#39;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ref, reactive, watch, defineAsyncComponent } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> skeleton </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./components/骨架屏/skeleton.vue&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 异步组件的引入需要使用defineAsyncComponent</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">syncVue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineAsyncComponent</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./components/骨架屏/sync.vue&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scoped</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>在这个例子中，<code>syncVue.vue</code>的代码会被分割到一个单独的包中。当<code>syncVue组件</code>被实际需要时，Vue会自动加载这个包。</p><h2 id="示例" tabindex="-1">示例： <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例：&quot;">​</a></h2>`,12),P=JSON.parse('{"title":"异步组件&代码分包&suspense","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Vue/16-异步组件&代码分包&suspense.md","filePath":"articles/Vue/16-异步组件&代码分包&suspense.md","lastUpdated":null}'),C={name:"articles/Vue/16-异步组件&代码分包&suspense.md"},w=p({...C,setup(o){return(l,s)=>(a(),e("div",null,[B,n(k)]))}});export{P as __pageData,w as default};
