import{_ as t,o as r,c as a,V as e}from"./chunks/framework.747c9e80.js";const _=JSON.parse('{"title":"迭代器与生成器总结","description":"","frontmatter":{},"headers":[],"relativePath":"articles/JavaScript/迭代器与生成器总结.md","filePath":"articles/JavaScript/迭代器与生成器总结.md","lastUpdated":1690860591000}'),o={name:"articles/JavaScript/迭代器与生成器总结.md"},n=e('<h1 id="迭代器与生成器总结" tabindex="-1">迭代器与生成器总结 <a class="header-anchor" href="#迭代器与生成器总结" aria-label="Permalink to &quot;迭代器与生成器总结&quot;">​</a></h1><p>参考《JavaScript高级程序设计》</p><hr><p>迭代是一种所有编程语言中都可以看到的模式。ECMAScript 6 正式支持迭代模式并引入了两个新的语言特性：<strong>迭代器</strong>和<strong>生成器</strong>。</p><h2 id="迭代器" tabindex="-1">迭代器 <a class="header-anchor" href="#迭代器" aria-label="Permalink to &quot;迭代器&quot;">​</a></h2><p><strong>迭代器</strong>是一个可以由任意对象实现的接口，支持连续获取对象产出的每一个值。任何<strong>实现 Iterable 接口的对象</strong>都有一个 <strong>Symbol.iterator 属性</strong>，这个属性引用默认迭代器。默认迭代器就像一个迭代器工厂，也就是一个函数，调用之后会产生一个<strong>实现 Iterator 接口的对象</strong>。</p><p><strong>迭代器</strong>必须通过连续调用 <code>next()</code>方法才能连续取得值，这个方法返回一个** IteratorObject**。这个对象包含一个 <strong>done 属性</strong>和一个 <strong>value 属性</strong>。前者是一个布尔值，表示<strong>是否还有更多值可以访问</strong>；后者包含<strong>迭代器返回的当前值</strong>。这个接口可以通过手动反复调用 <code>next()</code>方法来消费，也可以通过<strong>原生消费者</strong>，比如 <strong>for-of 循环</strong>来自动消费。</p><h2 id="生成器" tabindex="-1">生成器 <a class="header-anchor" href="#生成器" aria-label="Permalink to &quot;生成器&quot;">​</a></h2><p><strong>生成器</strong>是一种特殊的函数，调用之后会返回一个生成器对象。<strong>生成器对象实现了 Iterable 接口</strong>，因此可用在任何消费<strong>可迭代对象</strong>的地方。生成器的独特之处在于支持 <strong>yield 关键字</strong>，这个关键字能够<strong>暂停执行</strong>生成器函数。使用 yield 关键字还可以通过 <code>next()</code>方法接收输入和产生输出。在<strong>yield加上星号</strong>之后，yield 关键字可以将跟在它后面的可迭代对象<strong>序列化为一连串值</strong>。</p><p>任何<strong>实现 Iterable 接口的数据结构</strong>都可以被实现 Iterator 接口的结构“<strong>消费</strong>”（consume）。迭代器（iterator）是<strong>按需创建</strong>的一次性对象。每个迭代器都会关联一个<strong>可迭代对象</strong>，而迭代器会暴露迭代其关联可迭代对象的 API。</p><h2 id="关系图" tabindex="-1">关系图 <a class="header-anchor" href="#关系图" aria-label="Permalink to &quot;关系图&quot;">​</a></h2><p><img src="https://cdn.staticaly.com/gh/hr1201/img@main/imgs/image-20230501221001308.png" alt="image-20230501221001308"></p><h2 id="实现iterable接口的内置类型" tabindex="-1">实现iterable接口的内置类型 <a class="header-anchor" href="#实现iterable接口的内置类型" aria-label="Permalink to &quot;实现iterable接口的内置类型&quot;">​</a></h2><p><img src="https://cdn.staticaly.com/gh/hr1201/img@main/imgs/image-20230501221339593.png" alt="image-20230501221339593"></p><h2 id="接收可迭代对象的原生语言特性" tabindex="-1">接收可迭代对象的原生语言特性 <a class="header-anchor" href="#接收可迭代对象的原生语言特性" aria-label="Permalink to &quot;接收可迭代对象的原生语言特性&quot;">​</a></h2><p><img src="https://cdn.staticaly.com/gh/hr1201/img@main/imgs/image-20230501221348752.png" alt="image-20230501221348752"></p>',16),s=[n];function i(g,c,l,d,h,p){return r(),a("div",null,s)}const b=t(o,[["render",i]]);export{_ as __pageData,b as default};
