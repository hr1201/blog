import{_ as s,o as n,c as a,R as p}from"./chunks/framework.9b35f1b8.js";const A=JSON.parse('{"title":"元组类型","description":"","frontmatter":{},"headers":[],"relativePath":"articles/typescript/10-元组类型.md","filePath":"articles/typescript/10-元组类型.md","lastUpdated":1690859668000}'),l={name:"articles/typescript/10-元组类型.md"},e=p(`<h1 id="元组类型" tabindex="-1">元组类型 <a class="header-anchor" href="#元组类型" aria-label="Permalink to &quot;元组类型&quot;">​</a></h1><p>在 TypeScript 中，<code>元组（Tuple）类型</code>用于表示<strong>固定长度</strong>和<strong>类型</strong>的<strong>数组</strong>。</p><p>元组类型可以包含<strong>多个不同类型</strong>的元素，并且每个元素的类型是<strong>预定义</strong>的。元组类型的长度是固定的，即在创建元组时指定了元素的数量，并且每个元素的类型在元组类型中的对应位置是已知的。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr2</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">y</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 需要type类型，直接传arr[0]会报错，所以需要使用typeof去判断其类型</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">first</span><span style="color:#89DDFF;">=typeof</span><span style="color:#A6ACCD;"> arr[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">second</span><span style="color:#89DDFF;">=typeof</span><span style="color:#A6ACCD;"> arr[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">length</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="https://cdn.staticaly.com/gh/hr1201/img@main/imgs/202307252114993.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/hr1201/img@main/imgs/202307252119442.png" alt=""></p>`,6),o=[e];function t(r,c,i,y,C,F){return n(),a("div",null,o)}const m=s(l,[["render",t]]);export{A as __pageData,m as default};
