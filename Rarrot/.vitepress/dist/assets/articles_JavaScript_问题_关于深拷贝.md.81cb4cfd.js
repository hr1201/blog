import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.8cfa4934.js";const u=JSON.parse('{"title":"关于深拷贝","description":"","frontmatter":{},"headers":[],"relativePath":"articles/JavaScript/问题/关于深拷贝.md","filePath":"articles/JavaScript/问题/关于深拷贝.md","lastUpdated":1693315179000}'),p={name:"articles/JavaScript/问题/关于深拷贝.md"},o=l(`<h1 id="关于深拷贝" tabindex="-1">关于深拷贝 <a class="header-anchor" href="#关于深拷贝" aria-label="Permalink to &quot;关于深拷贝&quot;">​</a></h1><p>在做项目时遇到了表单填写后，不点击提交或确定，<strong>其数据也发生了变化</strong>；</p><p>这时候，我们需要使用到深拷贝去解决这个问题：</p><p><code>深拷贝</code>：创建一个新的对象和数组，将原对象的各项属性的&quot;值&quot;(数组的所有元素)拷贝过来，是&quot;值&quot;而不是&quot;引用&quot;，新对象跟原对象不共享内存，修改新对象<strong>不会影响</strong>到原对象。</p><p><code>浅拷贝（Shallow Copy）</code>：将原对象的引用复制给新对象，新对象与原对象共享同一个内存地址，修改新对象<strong>会影响</strong>原对象，反之亦然。浅拷贝只复制了对象的引用，而没有复制对象本身。</p><h2 id="解决方法一" tabindex="-1">解决方法一 <a class="header-anchor" href="#解决方法一" aria-label="Permalink to &quot;解决方法一&quot;">​</a></h2><p>将数据库获取数据赋值到一个<code>tempIndex</code>中(非表单中的数据)，当点击按钮修改非表单数据时深拷贝<code>tempIndex</code>，赋值到<code>index</code>，在表单中对<code>index</code>做修改，点击确定或提交，把数据发送至后端，这样在没有点击确定或提交时原数据才不会跟着改变。</p><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p>仅能用于防止意外修改，未实现深拷贝</p><h2 id="解决方法二" tabindex="-1">解决方法二 <a class="header-anchor" href="#解决方法二" aria-label="Permalink to &quot;解决方法二&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cloneJSON</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(source));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cloneJSON</span><span style="color:#24292E;">(</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(source));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通过将对象转换为 JSON 字符串，然后再将 JSON 字符串解析为新对象的方式实现深拷贝，<strong>适用于大多数简单的对象和数组</strong>。</p><ol><li><p>使用 <code>JSON.stringify(source)</code> 将源对象（source）序列化为 JSON 字符串。这个过程会将对象的所有属性和值转换为字符串表示。</p></li><li><p>使用 <code>JSON.parse()</code> 将 JSON 字符串解析为新的对象。这个过程会创建一个新的对象，其中包含源对象的所有属性和值的拷贝。</p></li></ol><h3 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>无法处理循环引用的对象。如果对象中存在循环引用，<code>JSON.stringify()</code> 会抛出错误。</li><li>无法拷贝函数、正则表达式、Symbol 类型等特殊对象。这些对象在序列化和解析过程中会丢失。</li><li>无法保留对象的原型链。新对象的原型链会被重置为 <code>Object.prototype</code>。</li></ul><h2 id="解决方法三-递归实现" tabindex="-1">解决方法三：递归实现 <a class="header-anchor" href="#解决方法三-递归实现" aria-label="Permalink to &quot;解决方法三：递归实现&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> clone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(obj) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (obj.</span><span style="color:#B392F0;">hasOwnProperty</span><span style="color:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      clone[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(obj[key]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> clone;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> clone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(obj) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(key)) {</span></span>
<span class="line"><span style="color:#24292E;">      clone[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(obj[key]);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> clone;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ol><li><p>在循环中，函数使用 <code>hasOwnProperty()</code> 方法来检查属性是否为 <code>obj</code> 自身的属性，以避免拷贝原型链上的属性。</p></li><li><p>对于每个属性，函数递归调用 <code>deepClone()</code> 函数来拷贝属性的值，并将拷贝后的值赋给 <code>clone</code> 对应的属性。</p></li></ol><p>能够处理<strong>复杂的对象结构，包括嵌套的对象和数组</strong>。它会递归地遍历对象的所有属性，并对每个属性进行深拷贝。这样可以确保拷贝后的对象与原始对象完全独立，互不影响。</p><h3 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li><p>仍然无法处理循环引用的对象，因为递归调用会导致无限循环。</p></li><li><p>无法拷贝函数、正则表达式、Symbol 类型等特殊对象。</p></li></ul><h2 id="解决方法四-使用第三方库" tabindex="-1">解决方法四：使用第三方库 <a class="header-anchor" href="#解决方法四-使用第三方库" aria-label="Permalink to &quot;解决方法四：使用第三方库&quot;">​</a></h2><p>lodash 是一个流行的 JavaScript 工具库，提供了许多实用的功能，包括深拷贝。您可以使用 lodash 的 <code>cloneDeep</code> 函数实现深拷贝：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newObj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _.</span><span style="color:#B392F0;">cloneDeep</span><span style="color:#E1E4E8;">(oldObj);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newObj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _.</span><span style="color:#6F42C1;">cloneDeep</span><span style="color:#24292E;">(oldObj);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,24),e=[o];function c(r,t,E,y,i,d){return a(),n("div",null,e)}const h=s(p,[["render",c]]);export{u as __pageData,h as default};
