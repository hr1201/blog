import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.ee3d195b.js";const d=JSON.parse('{"title":"Readonly和Record","description":"","frontmatter":{},"headers":[],"relativePath":"articles/typescript/27-Readonly和Record.md","filePath":"articles/typescript/27-Readonly和Record.md","lastUpdated":1690977115000}'),p={name:"articles/typescript/27-Readonly和Record.md"},o=l(`<h1 id="readonly和record" tabindex="-1">Readonly和Record <a class="header-anchor" href="#readonly和record" aria-label="Permalink to &quot;Readonly和Record&quot;">​</a></h1><h2 id="readonly" tabindex="-1">Readonly <a class="header-anchor" href="#readonly" aria-label="Permalink to &quot;Readonly&quot;">​</a></h2><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">age</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">text</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 此时man的类型为：</span></span>
<span class="line"><span style="color:#6A737D;">    type man = {</span></span>
<span class="line"><span style="color:#6A737D;">        readonly name: string;</span></span>
<span class="line"><span style="color:#6A737D;">        readonly age: number;</span></span>
<span class="line"><span style="color:#6A737D;">        readonly text: string;</span></span>
<span class="line"><span style="color:#6A737D;">    }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">man</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">Readonly</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">text</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 此时man的类型为：</span></span>
<span class="line"><span style="color:#6A737D;">    type man = {</span></span>
<span class="line"><span style="color:#6A737D;">        readonly name: string;</span></span>
<span class="line"><span style="color:#6A737D;">        readonly age: number;</span></span>
<span class="line"><span style="color:#6A737D;">        readonly text: string;</span></span>
<span class="line"><span style="color:#6A737D;">    }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">man</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">Readonly</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="从源码进行解读" tabindex="-1">从源码进行解读： <a class="header-anchor" href="#从源码进行解读" aria-label="Permalink to &quot;从源码进行解读：&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;age&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;text&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 将 T 中的所有属性设为只读</span></span>
<span class="line"><span style="color:#6A737D;"> * 这里T为Person，keyof Person后即为上面的key，再对其进行遍历</span></span>
<span class="line"><span style="color:#6A737D;"> * T[P]就相当于Person[name]，也就等于string</span></span>
<span class="line"><span style="color:#6A737D;">\` * 再对其添加只读readonly约束，返回一个新的对象类型</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Readonly</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">P</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">keyof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">P</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;age&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;text&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 将 T 中的所有属性设为只读</span></span>
<span class="line"><span style="color:#6A737D;"> * 这里T为Person，keyof Person后即为上面的key，再对其进行遍历</span></span>
<span class="line"><span style="color:#6A737D;"> * T[P]就相当于Person[name]，也就等于string</span></span>
<span class="line"><span style="color:#6A737D;">\` * 再对其添加只读readonly约束，返回一个新的对象类型</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readonly</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">P</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">P</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="record" tabindex="-1">Record <a class="header-anchor" href="#record" aria-label="Permalink to &quot;Record&quot;">​</a></h2><h3 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">text</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">t</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;i&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;k&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;u&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;n&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">woman</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Recor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> objec</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">woman</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    i:{name:</span><span style="color:#9ECBFF;">&#39;cxk&#39;</span><span style="color:#E1E4E8;">,age:</span><span style="color:#79B8FF;">66</span><span style="color:#E1E4E8;">,text:</span><span style="color:#9ECBFF;">&#39;唱&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    k:{name:</span><span style="color:#9ECBFF;">&#39;cxk&#39;</span><span style="color:#E1E4E8;">,age:</span><span style="color:#79B8FF;">66</span><span style="color:#E1E4E8;">,text:</span><span style="color:#9ECBFF;">&#39;跳&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    u:{name:</span><span style="color:#9ECBFF;">&#39;cxk&#39;</span><span style="color:#E1E4E8;">,age:</span><span style="color:#79B8FF;">66</span><span style="color:#E1E4E8;">,text:</span><span style="color:#9ECBFF;">&#39;rap&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    n:{name:</span><span style="color:#9ECBFF;">&#39;cxk&#39;</span><span style="color:#E1E4E8;">,age:</span><span style="color:#79B8FF;">66</span><span style="color:#E1E4E8;">,text:</span><span style="color:#9ECBFF;">&#39;篮球&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">text</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">t</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;i&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;k&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;u&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;n&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">woman</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Recor</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">t</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> objec</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">woman</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    i:{name:</span><span style="color:#032F62;">&#39;cxk&#39;</span><span style="color:#24292E;">,age:</span><span style="color:#005CC5;">66</span><span style="color:#24292E;">,text:</span><span style="color:#032F62;">&#39;唱&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    k:{name:</span><span style="color:#032F62;">&#39;cxk&#39;</span><span style="color:#24292E;">,age:</span><span style="color:#005CC5;">66</span><span style="color:#24292E;">,text:</span><span style="color:#032F62;">&#39;跳&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    u:{name:</span><span style="color:#032F62;">&#39;cxk&#39;</span><span style="color:#24292E;">,age:</span><span style="color:#005CC5;">66</span><span style="color:#24292E;">,text:</span><span style="color:#032F62;">&#39;rap&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    n:{name:</span><span style="color:#032F62;">&#39;cxk&#39;</span><span style="color:#24292E;">,age:</span><span style="color:#005CC5;">66</span><span style="color:#24292E;">,text:</span><span style="color:#032F62;">&#39;篮球&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="从源码进行解读-1" tabindex="-1">从源码进行解读： <a class="header-anchor" href="#从源码进行解读-1" aria-label="Permalink to &quot;从源码进行解读：&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">symbol</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 从 Person 中选择一组属性，其键位于并集 &#39;age&#39;|&#39;name&#39; 中</span></span>
<span class="line"><span style="color:#6A737D;"> * keyof T即为上面的key，</span></span>
<span class="line"><span style="color:#6A737D;"> * K extends keyof T表示K为T的子集，这样才能确保K中的属性名是T中存在的属性名</span></span>
<span class="line"><span style="color:#6A737D;"> * 这样才可以使用T[P]获取T中对应属性的类型</span></span>
<span class="line"><span style="color:#6A737D;"> * 然后进行遍历，最后返回新的对象类型</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">keyof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#B392F0;">P</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">symbol</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 从 Person 中选择一组属性，其键位于并集 &#39;age&#39;|&#39;name&#39; 中</span></span>
<span class="line"><span style="color:#6A737D;"> * keyof T即为上面的key，</span></span>
<span class="line"><span style="color:#6A737D;"> * K extends keyof T表示K为T的子集，这样才能确保K中的属性名是T中存在的属性名</span></span>
<span class="line"><span style="color:#6A737D;"> * 这样才可以使用T[P]获取T中对应属性的类型</span></span>
<span class="line"><span style="color:#6A737D;"> * 然后进行遍历，最后返回新的对象类型</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Record</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#6F42C1;">P</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,11),e=[o];function r(c,t,y,E,i,F){return n(),a("div",null,e)}const m=s(p,[["render",r]]);export{d as __pageData,m as default};
