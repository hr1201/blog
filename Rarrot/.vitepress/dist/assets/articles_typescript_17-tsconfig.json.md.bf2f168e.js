import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.29896bad.js";const F=JSON.parse('{"title":"tsconfig.json","description":"","frontmatter":{},"headers":[],"relativePath":"articles/typescript/17-tsconfig.json.md","filePath":"articles/typescript/17-tsconfig.json.md","lastUpdated":1690859668000}'),p={name:"articles/typescript/17-tsconfig.json.md"},o=l(`<h1 id="tsconfig-json" tabindex="-1">tsconfig.json <a class="header-anchor" href="#tsconfig-json" aria-label="Permalink to &quot;tsconfig.json&quot;">​</a></h1><h2 id="生成tsconfig-json文件" tabindex="-1">生成tsconfig.json文件 <a class="header-anchor" href="#生成tsconfig-json文件" aria-label="Permalink to &quot;生成tsconfig.json文件&quot;">​</a></h2><p>在终端或者powershell通过tsc --init命令生成。</p><h2 id="配置详解" tabindex="-1">配置详解 <a class="header-anchor" href="#配置详解" aria-label="Permalink to &quot;配置详解&quot;">​</a></h2><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;incremental&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;tsBuildInfoFile&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./buildFile&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 增量编译文件的存储位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;diagnostics&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 打印诊断信息 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;target&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ES5&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 目标语言的版本</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;module&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;CommonJS&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 生成代码的模板标准</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;outFile&quot;: &quot;./app.js&quot;, // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置&quot;module&quot;: &quot;AMD&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;lib&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;DOM&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;ES2015&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;ScriptHost&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;ES2019.Array&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ], </span><span style="color:#6A737D;">// TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入&quot;ES2019.Array&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;allowJS&quot;: true, // 允许编译器编译JS，JSX文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;checkJs&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 允许在JS文件中报错，通常与allowJS一起使用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;outDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./dist&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定输出目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;rootDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定输出文件目录(用于输出)，用于控制输出目录结构</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;declaration&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 生成声明文件，开启后会自动生成声明文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;declarationDir&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./file&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定生成声明文件存放目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;emitDeclarationOnly&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 只生成声明文件，而不会生成js文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;sourceMap&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 生成目标文件的sourceMap文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;inlineSourceMap&quot;: true, // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;declarationMap&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 为声明文件生成sourceMap</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;typeRoots&quot;</span><span style="color:#E1E4E8;">: [], </span><span style="color:#6A737D;">// 声明文件目录，默认时node_modules/@types</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;types&quot;</span><span style="color:#E1E4E8;">: [], </span><span style="color:#6A737D;">// 加载的声明文件包</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;removeComments&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 删除注释 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;noEmit&quot;: true, // 不输出文件,即编译后不会生成任何js文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noEmitOnError&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 发送错误时不输出任何文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noEmitHelpers&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;importHelpers&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 通过tslib引入helper函数，文件必须是模块</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;downlevelIteration&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 开启所有严格的类型检查</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;alwaysStrict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 在代码中注入&#39;use strict&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noImplicitAny&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 不允许隐式的any类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strictNullChecks&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 不允许把null、undefined赋值给其他类型的变量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strictFunctionTypes&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 不允许函数参数双向协变</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strictPropertyInitialization&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 类的实例属性必须初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strictBindCallApply&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 严格的bind/call/apply检查</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noImplicitThis&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 不允许this有隐式的any类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noUnusedLocals&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 检查只声明、未使用的局部变量(只提示不报错)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noUnusedParameters&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 检查未使用的函数参数(只提示不报错)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noFallthroughCasesInSwitch&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 防止switch语句贯穿(即如果没有break语句后面不会执行)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;noImplicitReturns&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//每个分支都会有返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;esModuleInterop&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 允许export=导出，由import from 导入</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;allowUmdGlobalAccess&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 允许在模块中全局变量的方式访问umd模块</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;moduleResolution&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 模块解析策略，ts默认用node的解析策略，即相对的方式导入</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;baseUrl&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 解析非相对模块的基地址，默认是当前目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;paths&quot;</span><span style="color:#E1E4E8;">: { </span><span style="color:#6A737D;">// 路径映射，相对于baseUrl</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;jquery&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;rootDirs&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;src&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;out&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ], </span><span style="color:#6A737D;">// 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;listEmittedFiles&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 打印输出文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;listFiles&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 打印编译的文件(包括引用的声明文件)</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;include&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;src/**/*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;index.ts&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// // 指定一个排除列表（include的反向操作）</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// &quot;exclude&quot;: [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//   &quot;demo.ts&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// // 指定哪些文件使用该配置（属于手动一个个指定文件）</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// &quot;files&quot;: [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//   &quot;demo.ts&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;incremental&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;tsBuildInfoFile&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./buildFile&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 增量编译文件的存储位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;diagnostics&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 打印诊断信息 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ES5&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 目标语言的版本</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;CommonJS&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 生成代码的模板标准</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;outFile&quot;: &quot;./app.js&quot;, // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置&quot;module&quot;: &quot;AMD&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;lib&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;DOM&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;ES2015&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;ScriptHost&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;ES2019.Array&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ], </span><span style="color:#6A737D;">// TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入&quot;ES2019.Array&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;allowJS&quot;: true, // 允许编译器编译JS，JSX文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;checkJs&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 允许在JS文件中报错，通常与allowJS一起使用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;outDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 指定输出目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;rootDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 指定输出文件目录(用于输出)，用于控制输出目录结构</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;declaration&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 生成声明文件，开启后会自动生成声明文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;declarationDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./file&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 指定生成声明文件存放目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;emitDeclarationOnly&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 只生成声明文件，而不会生成js文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;sourceMap&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 生成目标文件的sourceMap文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;inlineSourceMap&quot;: true, // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;declarationMap&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 为声明文件生成sourceMap</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;typeRoots&quot;</span><span style="color:#24292E;">: [], </span><span style="color:#6A737D;">// 声明文件目录，默认时node_modules/@types</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;types&quot;</span><span style="color:#24292E;">: [], </span><span style="color:#6A737D;">// 加载的声明文件包</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;removeComments&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 删除注释 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;noEmit&quot;: true, // 不输出文件,即编译后不会生成任何js文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noEmitOnError&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 发送错误时不输出任何文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noEmitHelpers&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;importHelpers&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 通过tslib引入helper函数，文件必须是模块</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;downlevelIteration&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 开启所有严格的类型检查</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;alwaysStrict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 在代码中注入&#39;use strict&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noImplicitAny&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 不允许隐式的any类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strictNullChecks&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 不允许把null、undefined赋值给其他类型的变量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strictFunctionTypes&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 不允许函数参数双向协变</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strictPropertyInitialization&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 类的实例属性必须初始化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strictBindCallApply&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 严格的bind/call/apply检查</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noImplicitThis&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 不允许this有隐式的any类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noUnusedLocals&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 检查只声明、未使用的局部变量(只提示不报错)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noUnusedParameters&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 检查未使用的函数参数(只提示不报错)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noFallthroughCasesInSwitch&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 防止switch语句贯穿(即如果没有break语句后面不会执行)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noImplicitReturns&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//每个分支都会有返回值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;esModuleInterop&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 允许export=导出，由import from 导入</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;allowUmdGlobalAccess&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 允许在模块中全局变量的方式访问umd模块</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;moduleResolution&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 模块解析策略，ts默认用node的解析策略，即相对的方式导入</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;baseUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 解析非相对模块的基地址，默认是当前目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;paths&quot;</span><span style="color:#24292E;">: { </span><span style="color:#6A737D;">// 路径映射，相对于baseUrl</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;jquery&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;rootDirs&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;src&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;out&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ], </span><span style="color:#6A737D;">// 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;listEmittedFiles&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 打印输出文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;listFiles&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 打印编译的文件(包括引用的声明文件)</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;include&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;src/**/*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;index.ts&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// // 指定一个排除列表（include的反向操作）</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// &quot;exclude&quot;: [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//   &quot;demo.ts&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// // 指定哪些文件使用该配置（属于手动一个个指定文件）</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// &quot;files&quot;: [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//   &quot;demo.ts&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><h2 id="常用" tabindex="-1">常用 <a class="header-anchor" href="#常用" aria-label="Permalink to &quot;常用&quot;">​</a></h2><p>1.include</p><p>指定编译文件默认是编译当前目录下所有的ts文件</p><p>2.exclude</p><p>指定排除的文件</p><p>3.target</p><p>指定编译js 的版本例如es5 es6</p><p>4.allowJS</p><p>是否允许编译js文件</p><p>5.removeComments</p><p>是否在编译过程中删除文件中的注释</p><p>6.rootDir</p><p>编译文件的目录</p><p>7.outDir</p><p>输出的目录</p><p>8.sourceMap</p><p>代码源文件</p><p>9.strict</p><p>严格模式</p><p>10.module</p><p>默认common.js 可选es6模式 amd umd 等</p>`,26),e=[o];function t(r,c,E,y,u,i){return n(),a("div",null,e)}const b=s(p,[["render",t]]);export{F as __pageData,b as default};
