import{_ as a,o as s,c as n,Q as e}from"./chunks/framework.8cfa4934.js";const m=JSON.parse('{"title":"关于博客建立过程","description":"","frontmatter":{},"headers":[],"relativePath":"articles/博客/关于博客建立过程.md","filePath":"articles/博客/关于博客建立过程.md","lastUpdated":1696426914000}'),l={name:"articles/博客/关于博客建立过程.md"},t=e(`<h1 id="关于博客建立过程" tabindex="-1">关于博客建立过程 <a class="header-anchor" href="#关于博客建立过程" aria-label="Permalink to &quot;关于博客建立过程&quot;">​</a></h1><h2 id="第一阶段" tabindex="-1">第一阶段 <a class="header-anchor" href="#第一阶段" aria-label="Permalink to &quot;第一阶段&quot;">​</a></h2><p>搞了博客的一些基本的东西：</p><h2 id="_1-algolia评论" tabindex="-1">1. algolia评论 <a class="header-anchor" href="#_1-algolia评论" aria-label="Permalink to &quot;1. algolia评论&quot;">​</a></h2><h2 id="_2-搜索" tabindex="-1">2. 搜索 <a class="header-anchor" href="#_2-搜索" aria-label="Permalink to &quot;2. 搜索&quot;">​</a></h2><p>搜索一开始是用vitepress自带生成的，但后面发现<a href="https://www.algolia.com/developers/?utm_medium=referral&amp;utm_content=powered_by&amp;utm_source=localhost&amp;utm_campaign=docsearch" target="_blank" rel="noreferrer">algolia</a>还可以帮你统计查询数，而且官网也是使用的algolia，所以也更换成这一个了。</p><p>用之前需要前往algolia官网申请一下，然后会</p><h2 id="_3-自动生成目录" tabindex="-1">3. 自动生成目录 <a class="header-anchor" href="#_3-自动生成目录" aria-label="Permalink to &quot;3. 自动生成目录&quot;">​</a></h2><p>新增博客文章后，还得去sidebar配置一下，就会比较麻烦，例如：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Guide&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">         { text: </span><span style="color:#9ECBFF;">&#39;Introduction&#39;</span><span style="color:#E1E4E8;">, link: </span><span style="color:#9ECBFF;">&#39;/introduction&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">         { text: </span><span style="color:#9ECBFF;">&#39;Getting Started&#39;</span><span style="color:#E1E4E8;">, link: </span><span style="color:#9ECBFF;">&#39;/getting-started&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">     ]</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Guide&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">         { text: </span><span style="color:#032F62;">&#39;Introduction&#39;</span><span style="color:#24292E;">, link: </span><span style="color:#032F62;">&#39;/introduction&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">         { text: </span><span style="color:#032F62;">&#39;Getting Started&#39;</span><span style="color:#24292E;">, link: </span><span style="color:#032F62;">&#39;/getting-started&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">     ]</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>找到<a href="https://blog.csdn.net/weixin_46463785/article/details/128592038?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-128592038-blog-128889252.235%5Ev38%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-128592038-blog-128889252.235%5Ev38%5Epc_relevant_default_base&amp;utm_relevant_index=2" target="_blank" rel="noreferrer">摸鱼老萌新</a>大佬写的自动生成目录，就简单多了。</p><br><p>后面觉得在同一页面下生成多个侧边栏，文件夹需要放在不同位置不太适合自己，就又修改了一下，在header上的标题作为大文件夹，大文件夹下还有文件夹也生成侧边栏。例如： <img src="https://cdn.jsdelivr.net/gh/hr1201/img@main/imgs/202309191329938.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/hr1201/img@main/imgs/202309191215548.png" alt=""></p><h2 id="_4-预览图片" tabindex="-1">4.预览图片 <a class="header-anchor" href="#_4-预览图片" aria-label="Permalink to &quot;4.预览图片&quot;">​</a></h2>`,15),p=[t];function o(r,c,i,d,E,_){return s(),n("div",null,p)}const u=a(l,[["render",o]]);export{m as __pageData,u as default};
