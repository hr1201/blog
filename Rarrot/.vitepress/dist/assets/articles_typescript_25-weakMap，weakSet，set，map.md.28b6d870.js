import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.fe0df64f.js";const F=JSON.parse('{"title":"weakMap，weakSet，set，map","description":"","frontmatter":{},"headers":[],"relativePath":"articles/typescript/25-weakMap，weakSet，set，map.md","filePath":"articles/typescript/25-weakMap，weakSet，set，map.md","lastUpdated":1690977115000}'),l={name:"articles/typescript/25-weakMap，weakSet，set，map.md"},o=p(`<h1 id="weakmap-weakset-set-map" tabindex="-1">weakMap，weakSet，set，map <a class="header-anchor" href="#weakmap-weakset-set-map" aria-label="Permalink to &quot;weakMap，weakSet，set，map&quot;">​</a></h1><h2 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set&quot;">​</a></h2><p>集合是由一组<strong>无序且唯一(即不能重复)的项</strong>组成的，可以想象成集合是一个既没有重复元素，也没有顺序概念的数组。</p><p>内置有迭代器，可以使用entries，forEach，for of，且还有以下方法：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> set</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">set.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(set)</span><span style="color:#6A737D;">//Set(7) { 1, 2, 3, 4, 5, 6, 7 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(set.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">))</span><span style="color:#6A737D;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">set.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(set.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">))</span><span style="color:#6A737D;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">set.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(set)</span><span style="color:#6A737D;">//Set(0) {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(set)</span><span style="color:#6A737D;">//Set(7) { 1, 2, 3, 4, 5, 6, 7 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(set.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">))</span><span style="color:#6A737D;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(set.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">))</span><span style="color:#6A737D;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(set)</span><span style="color:#6A737D;">//Set(0) {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="map" tabindex="-1">map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map&quot;">​</a></h2><p>它类似于对象，也是<strong>键值对的集</strong>合，但是“<strong>键</strong>”的范围不限于字符串，<strong>各种类型的值</strong>（包括引用类型，即对象object，array等）都可以当作键，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{name:</span><span style="color:#9ECBFF;">&#39;rarrot&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> map</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">=new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">map.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(obj,</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(obj))</span><span style="color:#6A737D;">//1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{name:</span><span style="color:#032F62;">&#39;rarrot&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> map</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(obj,</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(obj))</span><span style="color:#6A737D;">//1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="weakmap" tabindex="-1">weakMap <a class="header-anchor" href="#weakmap" aria-label="Permalink to &quot;weakMap&quot;">​</a></h2><p>ECMAScript 6 新增的“<strong>弱映射</strong>”（WeakMap）是一种新的集合类型，为这门语言带来了<strong>增强的键/ 值对存储机制</strong>。WeakMap 是 Map 的“兄弟”类型，其 API 也是 Map 的子集。WeakMap 中的“weak”（弱）， 描述的是 <strong>JavaScript 垃圾回收程序对待“弱映射”中键的方式</strong>。</p><p><code>注意：</code>存储的为引用类型</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 这里对any只有两次使用，weakmap对obj的操作不会被垃圾回收策略计数</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name: </span><span style="color:#9ECBFF;">&#39;rarrot&#39;</span><span style="color:#E1E4E8;"> }</span><span style="color:#6A737D;">//1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj</span><span style="color:#6A737D;">//2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> weakmap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WeakMap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WeakMap</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">weakmap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(obj, a1)</span><span style="color:#6A737D;">//2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;🚀  a1&quot;</span><span style="color:#E1E4E8;">, a1)</span><span style="color:#6A737D;">//🚀  a1 { name: &#39;rarrot&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当设置a1也为null时，obj就没有被引用了，就会被垃圾回收掉</span></span>
<span class="line"><span style="color:#E1E4E8;">a1</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这里就获取不到值了</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(weakmap)</span><span style="color:#6A737D;">//underfined</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(weakmap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(obj))</span><span style="color:#6A737D;">//underfined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 这里对any只有两次使用，weakmap对obj的操作不会被垃圾回收策略计数</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;rarrot&#39;</span><span style="color:#24292E;"> }</span><span style="color:#6A737D;">//1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj</span><span style="color:#6A737D;">//2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> weakmap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WeakMap</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WeakMap</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">weakmap.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(obj, a1)</span><span style="color:#6A737D;">//2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;🚀  a1&quot;</span><span style="color:#24292E;">, a1)</span><span style="color:#6A737D;">//🚀  a1 { name: &#39;rarrot&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当设置a1也为null时，obj就没有被引用了，就会被垃圾回收掉</span></span>
<span class="line"><span style="color:#24292E;">a1</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这里就获取不到值了</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(weakmap)</span><span style="color:#6A737D;">//underfined</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(weakmap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(obj))</span><span style="color:#6A737D;">//underfined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>以下这张图展示的是obj还没有被垃圾回收时的weakmap，可以看到，即使weakmap中有值，也取不到，如下图：</p><p><img src="https://cdn.staticaly.com/gh/hr1201/img@main/imgs/202308021405057.png" alt=""></p><p>把对obj的引用都给去掉后，并且进行多次刷新，就可以看到Google引擎的v8引擎是把这一个obj给回收了，weakmap中的数据也不存在了，如下图：</p><p><img src="https://cdn.staticaly.com/gh/hr1201/img@main/imgs/202308021409742.png" alt=""></p><h2 id="weakset" tabindex="-1">weakSet <a class="header-anchor" href="#weakset" aria-label="Permalink to &quot;weakSet&quot;">​</a></h2><p>ECMAScript 6 新增的“<strong>弱集合</strong>”（WeakSet）是一种新的集合类型，为这门语言带来了<strong>集合数据结构</strong>。WeakSet 是 Set 的“兄弟”类型，其 API 也是 Set 的子集。WeakSet 中的“weak”（弱），描述的是 J<strong>avaScript 垃圾回收程序对待“弱集合”中值的方式</strong>。</p><p><code>注意：</code>存储的为引用类型</p><p>具体可以前往JavaScript的<a href="https://www.rorrot.cc/articles/JavaScript/WeakMap.html" target="_blank" rel="noreferrer">weakMap</a>和<a href="https://www.rorrot.cc/articles/JavaScript/WeakSet.html" target="_blank" rel="noreferrer">weakSet</a>。</p>`,20),e=[o];function t(r,c,y,E,i,b){return a(),n("div",null,e)}const d=s(l,[["render",t]]);export{F as __pageData,d as default};
