import AlgoliaAnalytics from "./insights";
import { WithAdditionalParams } from "./utils";
import { InsightsEvent } from "./types";
export interface InsightsSearchConversionEvent {
    eventName: string;
    userToken?: string;
    timestamp?: number;
    index: string;
    queryID: string;
    objectIDs: string[];
    objectData?: InsightsEvent["objectData"];
}
export declare function convertedObjectIDsAfterSearch(this: AlgoliaAnalytics, ...params: WithAdditionalParams<InsightsSearchConversionEvent>[]): Promise<boolean> | undefined;
export declare function addedToCartObjectIDsAfterSearch(this: AlgoliaAnalytics, ...params: WithAdditionalParams<InsightsSearchConversionEvent>[]): Promise<boolean> | undefined;
export declare function purchasedObjectIDsAfterSearch(this: AlgoliaAnalytics, ...params: WithAdditionalParams<InsightsSearchConversionEvent>[]): Promise<boolean> | undefined;
export interface InsightsSearchConversionObjectIDsEvent {
    eventName: string;
    userToken?: string;
    timestamp?: number;
    index: string;
    objectIDs: string[];
    objectData?: InsightsEvent["objectData"];
}
export declare function convertedObjectIDs(this: AlgoliaAnalytics, ...params: WithAdditionalParams<InsightsSearchConversionObjectIDsEvent>[]): Promise<boolean> | undefined;
export declare function addedToCartObjectIDs(this: AlgoliaAnalytics, ...params: WithAdditionalParams<InsightsSearchConversionObjectIDsEvent>[]): Promise<boolean> | undefined;
export declare function purchasedObjectIDs(this: AlgoliaAnalytics, ...params: WithAdditionalParams<InsightsSearchConversionObjectIDsEvent>[]): Promise<boolean> | undefined;
export interface InsightsSearchConversionFiltersEvent {
    eventName: string;
    userToken?: string;
    timestamp?: number;
    index: string;
    filters: string[];
}
export declare function convertedFilters(this: AlgoliaAnalytics, ...params: WithAdditionalParams<InsightsSearchConversionFiltersEvent>[]): Promise<boolean> | undefined;
